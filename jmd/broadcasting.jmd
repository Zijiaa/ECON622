---
title       : "Broadcasting"
subtitle    : ""
author      : Paul Schrimpf
date        : `j using Dates; print(Dates.today())`
weave_options:
      out_width : 100%
      wrap : true
      fig_width : 800
      fig_height : 800
      dpi : 192
---

[![](https://i.creativecommons.org/l/by-sa/4.0/88x31.png)](http://creativecommons.org/licenses/by-sa/4.0/)

This work is licensed under a [Creative Commons Attribution-ShareAlike
4.0 International
License](http://creativecommons.org/licenses/by-sa/4.0/)

# Broadcasting

Last class there was a question about how broadcasting functions of vectors works on matrices and related issues.

The short answer is: broadcasting always applies functions to the elements of whatever containers are used. 
If you want to apply a function to rows or columns of a matrix, you need to use another construct.

Consider the following function that computes an inner product. 
```julia
function generic_f(x)
  return(x'*x)
end
```
This function is "generic" in that it doesn't specify the type of its arguments. 
It will work on any type for which: 
- `'` is defined
- `*` is defined
- transposing and then multiplying is allowed
You might ask: what types are those? 
We can easily come up with some, like `Vector` and `Matrix`, but there may be others too.  
The advantage of leaving the type unspecified is that our function will work with some 
types that we haven't even imagined. This approach is called "duck-typing" if `x` walks 
like a duck (has `'`) and talks like a duck (has `*`), then we'll treat it like a duck, 
and let `generic_f` work.

Anyway, even though `generic_f` is clearly written with vector like types in mind, 
`'` and `*` work for scalars too, so broadcasting it to a matrix simply squares each element.
```julia
X = [1.0 2.0; 3.0 4.0]
generic_f.(X)
```

We could try to force broadcasting to work on rows or columns by using a function that 
requires its arguments to be vectors. However, this doesn't work. Broadcasting always ends 
up passing each element of its argument to the function.

```julia
function vector_f(x::AbstractVector)
  return(x'*x)
end

try
  vector_f.(X)
catch e
  @show e
end

```

If we want to apply these functions to each row or column of `X` we can use an appropriate 
iterator combined with broadcasting.

```julia
generic_f.(eachrow(X))
vector_f.(eachcol(X))
```
For higher dimensional arrays, there's an `eachslice` iterator.
```julia
generic_f.(eachslice(X, dims=1))
```

We can also use `mapslices` instead of broadcasting

```julia
mapslices(generic_f, X, dims=[1])
mapslices(generic_f, X, dims=[2])
```
There are some differences here. With `mapslices`, the result is a matrix instead of a vector. 
Somewhat confusingly,  the `dims` argument in `mapslices` is different than the `dims` 
argument to `eachslice`. In `mapslices`, `dims` should be the locations where you would 
put colons if you were to write a loop e.g. `dims=[1]` means you're going to map to 
each `X[:,i] for i in axes(X, 2)`. 